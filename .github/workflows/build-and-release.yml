name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          if [ "${{ matrix.platform }}" = "mac" ]; then
            npm run build:mac
          elif [ "${{ matrix.platform }}" = "win" ]; then
            npm run build:win
          else
            npm run build:linux
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            dist/*.dmg
            dist/*.exe
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Google Messages App ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Changes in ${{ github.ref_name }}
            
            ### Downloads
            - **macOS**: Download the `.dmg` file
            - **Windows**: Download the `.exe` installer
            - **Linux**: Download the `.AppImage` or `.deb` file
            
            ### Installation Instructions
            See [INSTALLATION.md](./INSTALLATION.md) for detailed installation instructions for your platform.
            
            ### Package Managers
            - **Homebrew (macOS)**: `brew install --cask google-messages-app` _(coming soon)_
            - **Flatpak (Linux)**: `flatpak install com.example.GoogleMessagesApp` _(coming soon)_
            - **Chocolatey (Windows)**: `choco install google-messages-app` _(coming soon)_

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/**/*.dmg
            ./artifacts/**/*.exe
            ./artifacts/**/*.AppImage
            ./artifacts/**/*.deb
          body: |
            ## Downloads
            - **macOS**: Download the `.dmg` file (unsigned - see installation instructions)
            - **Windows**: Download the `.exe` installer 
            - **Linux**: Download the `.AppImage` or `.deb` file
            
            ### Installation Instructions
            
            **macOS**: After downloading the DMG:
            1. Open the DMG file
            2. Drag the app to Applications folder
            3. Right-click the app and select "Open" (bypass Gatekeeper warning)
            4. Click "Open" in the security dialog
            
            **Windows**: Run the installer as Administrator
            
            **Linux**: Make AppImage executable: `chmod +x GoogleMessages-*.AppImage`
            
            ### Note on macOS Security
            This app is not signed with an Apple Developer certificate, so macOS will show security warnings. This is normal for unsigned applications. The app is safe to use - it simply wraps Google Messages in a desktop window.
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}