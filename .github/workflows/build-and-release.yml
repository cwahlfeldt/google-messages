name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup macOS signing
        if: matrix.platform == 'mac'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          echo "Setting up macOS code signing"
          # Import certificates from secrets
          if [ -n "${{ secrets.APPLE_CERT_DATA }}" ]; then
            echo "${{ secrets.APPLE_CERT_DATA }}" | base64 -d > certificate.p12
            security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
            security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERT_PASSWORD }}" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
            rm certificate.p12
          fi

      - name: Setup Windows signing
        if: matrix.platform == 'win'
        run: |
          echo "Setting up Windows code signing"
          # Windows signing setup would go here
          # Requires certificate setup in secrets

      - name: Build application
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        run: |
          if [ "${{ matrix.platform }}" = "mac" ]; then
            npm run build:mac
          elif [ "${{ matrix.platform }}" = "win" ]; then
            npm run build:win
          else
            npm run build:linux
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            dist/*.dmg
            dist/*.exe
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Google Messages App ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Changes in ${{ github.ref_name }}
            
            ### Downloads
            - **macOS**: Download the `.dmg` file
            - **Windows**: Download the `.exe` installer
            - **Linux**: Download the `.AppImage` or `.deb` file
            
            ### Installation Instructions
            See [INSTALLATION.md](./INSTALLATION.md) for detailed installation instructions for your platform.
            
            ### Package Managers
            - **Homebrew (macOS)**: `brew install --cask google-messages-app` _(coming soon)_
            - **Flatpak (Linux)**: `flatpak install com.example.GoogleMessagesApp` _(coming soon)_
            - **Chocolatey (Windows)**: `choco install google-messages-app` _(coming soon)_

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/mac-build/Google Messages-${{ github.ref_name }}.dmg
          asset_name: GoogleMessages-${{ github.ref_name }}-mac.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/win-build/Google Messages Setup ${{ github.ref_name }}.exe
          asset_name: GoogleMessages-${{ github.ref_name }}-win.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-build/Google Messages-${{ github.ref_name }}.AppImage
          asset_name: GoogleMessages-${{ github.ref_name }}-linux.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-build/google-messages-app_${{ github.ref_name }}_amd64.deb
          asset_name: google-messages-app_${{ github.ref_name }}_amd64.deb
          asset_content_type: application/octet-stream
        continue-on-error: true

  update-package-managers:
    name: Update Package Managers
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Homebrew Formula
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
        run: |
          echo "Updating Homebrew formula"
          # Script to update homebrew formula would go here
          # This would create a PR to the homebrew tap repository
        continue-on-error: true

      - name: Update Flatpak
        run: |
          echo "Updating Flatpak manifest"
          # Script to update flatpak manifest would go here
          # This would create a PR to flathub repository
        continue-on-error: true